---
title: "Pacotes no R"
format: html
---

# Pacotes no R

Um pacote é como uma coleção de funções, dados e arquivos de ajuda agrupados em uma estrutura padrão bem definida que pode ser baixada e instalada em R. Então, pode-se dizer que os pacotes são códigos uteis e instaláveis que permitem estender os recursos do R para realizar as funções desejadas. Esses pacotes são compartilhados e podem ser baixados de várias fontes, sendo as mais populares o CRAN, Bioconductor e o GitHub. 
**CRAN** – é o repositório oficial do R para pacotes montados por usuários. 
**Bioconductor** – fornece software de código aberto orientado para bioinformática.
**GitHub** – é um site que hospeda repositórios git para todos os tipos de software e projetos (não apenas R). É onde as versões de desenvolvimento de ponta dos pacotes R são hospedadas

Os pacotes necessários para rodar análises no R depende do objetivo do trabalho a ser realizado, mas alguns pacotes são básicos e essenciais para a maioria das análises, como: Tidyverse, dplyr, readxl, ggplot, etc. Nas próximas aulas, aprofundaremos um pouco mais sobre esses pacotes.

## Instalação e carregamento pacotes

A instalação e o carregamento de **pacotes** pode ser feito pelo menu ou então com um comando no *console*. O fluxo básico pode ser conferido [neste link](https://r4ds.hadley.nz/workflow-basics.html).
A instalação é feita através do menu: tools \> install packages, indo em packages \> install e digitando o nome do pacote para baixar ou usando a função instal.packages(nome do pacote) no console. Para o carregamento de pacotes, a função utilizada é library(nome do pacote). O carregamento pode ser feito tanto pelo library, anotando entre parênteses o nome do pacote, quanto separando os programas por vírgula dentro do mesmo parêntese. Muitas vezes, durante o carregamento de pacotes, usamos as hashtags (#) seguidas por / warning: false e / message: false para desativar a exibição de avisos (warnings) e mensagens durante a execução do código, já que muitos pacotes exibem mensagens e avisos grandes após o carregamento que poluem o arquivo.

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(metafor)
library(gsheet)
library(remotes)
```

## Funções de pacotes:

As funções de pacotes são variadas e serão apresentadas de forma mais aprofundada na próxima aula (Dataframe). Enquanto isso, veremos rapidamente como invocar uma função de um pacote, mais especificamente a função arrange, do pacote dplyr. Para isso, utilizaremos o conjunto de dados mtcars, um conjunto de dados incorporado no R. 
"arrange()" é uma função do pacote dplyr que permite ordenar os dados com base em uma ou mais variáveis. Nesse caso, a função "arrange()" está sendo aplicada ao conjunto de dados "mtcars", e a variável "cyl" está sendo especificada como a variável de ordenação. Isso significa que os dados serão reorganizados de forma ascendente com base na variável "cyl").
Nas linhas seguintes, os comandos utilizados referem-se a busca de uma planilha especifica do google sheet e a instalação de um pacote "r4pde" diretamente do repositório GitHub do uduário Emerson Del Ponte. O sinal de igual é utilizado para atribuição, que pode ser substituido por \<-. A função head() retorna as primeiras linhas de um objeto de dados ou de um conjunto de dados, nesse caso, foi utilizado para retornar as primeiras linhas do conjunto mtcars.

```{r}
mtcars
arrange(mtcars, cyl)
Orange

url = gsheet2tbl('docs.google.com/spreadsheets/d/1I9mJsS5QnXF2TNNntTy-HrcdHmIF9wJ8ONYvEJTXSNo') 

b = url
install_github("emdelponte/r4pde")
head(mtcars)
```

**Pacote r4pde**: Em linhas gerais, a variável "unit" é criada e atribuída com os valores de 1 a 12 através da função c(1:12), depois a variável "class" também é criada. Posteriormente, é feita a criação de um data frame "ratings" com essas variáveis e, em seguida, aplica a função "DSI" do pacote r4pde aos dados. O bloco de comandos mais abaixo fornece instruções para visualizar os valores, calcular a média (mean), o desvio padrão (sd) e obter um resumo estatístico da variável "class" do conjunto de dados "ratings" (função summary).

```{r}
library(r4pde)
unit <- c(1:12)
class <- c(2,3,1,1,3,4,5,0,2,5,2,1)
ratings <- data.frame(unit, class)
DSI(unit = ratings$unit, class = ratings$class, max = 6)

ratings$class
mean(ratings$class)
sd(ratings$class)
summary(ratings$class)

summary(class)
```
