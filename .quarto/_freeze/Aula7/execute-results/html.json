{
  "hash": "49089fb24f2df596d139f94c72094fd8",
  "result": {
    "markdown": "---\ntitle: \"Aula7\"\nauthor: \"Nívia\"\nformat: html\n---\n\n\n# Transformação de dados\n\nComo já é de conhecimento, o primeiro passo é carregar os pacotes necessários (tidyverse e readxl).\nPara a transformação de dados, será utilizado o conjunto de dados mofo, presente dentro do banco de dados da planilha dados-diversos. \n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-1_f1e5380b5b43677cbf40b396613a55f2'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n\nmofo <- read_excel(\"dados-diversos.xlsx\", \"mofo\")\n```\n:::\n\n\nAgora, vamos visualizar os dados de inc (incidencia) pelos tratamentos e pelo estudo (tratamento dentro de estudo). Então, o tratamento vai dentro do ggplot, enquanto o study vai dentro de facet.\nA função facet_wrap() replica o gráfico especificado para cada categoria de uma coluna. \n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-2_cfd5aeb6f1f52e40dc3346cecc9cabbd'}\n\n```{.r .cell-code}\nmofo |>\n  ggplot(aes(treat, inc))+\n  facet_wrap(~study)+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Aula7_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nTambém pode usar a função geom_col para visualizar os dados de uma forma diferente.\n\n## Histograma\n\nAgora, faremos um histograma para visualizar a incidência e outro para visualizar os dados de escleródio.\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-3_cd0e9743cbac053b5d06af70de7c1b1d'}\n\n```{.r .cell-code}\ninc <- mofo |>\n  ggplot(aes(inc))+\n  geom_histogram()\n#Para o scleródio\nmofo |>\n    ggplot(aes(scl))+\n    geom_histogram()\n```\n\n::: {.cell-output-display}\n![](Aula7_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nDepois disso, montaremos um boxplot para visualizar os dados de scl.\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-4_4d80bd3ce5010563f904bc274f26f8c0'}\n\n```{.r .cell-code}\nscl <- mofo |>\n  ggplot(aes(scl))+\n  geom_boxplot()\n```\n:::\n\n\nAgora, como já aprendido, juntaremos os 2 gráficos, para isso, devemos carregar o pacote patchwork:\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-5_ec385b089c6933345bfdddb2a0ab230f'}\n\n```{.r .cell-code}\nlibrary(patchwork)\ninc + scl\n```\n\n::: {.cell-output-display}\n![](Aula7_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nApós isso, podemos encontrar a média dos dados. Para achar a média podemos usar as funções $, mean+conjunto ou summary.\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-6_1537b92666e6a83507de2ed891f24268'}\n\n```{.r .cell-code}\nmofo$scl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2194 1663 1313 1177  753 1343 1519  516  643  400  643  921 1196 1331  756\n[16]  338  581  588  231  925  119  394  206  275  131  588 5013 3619 2325 2588\n[31] 3969 1556 3175 1763 2894  350  419  644 2850 6216 2888 2272 2868 2412 2372\n[46] 3424 1744 1456 1732 1080 1592 3268\n```\n:::\n\n```{.r .cell-code}\nmean(mofo$scl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1639.096\n```\n:::\n:::\n\n\n## Transformando os dados\n\nNós podemos transformar os dados de diferentes maneiras. Ex.: log e raiz quadrada.\nPara transformar os dados para o logaritimo dos números usa-se a função mutate e log (). Através da função mutate() realizamos a criação/adição de uma nova variável (ou novas variaveis), que são funções de variáveis existentes, e também criamos/modificamos colunas.\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-7_bb9c967aad8acedcf62d7990201503ec'}\n\n```{.r .cell-code}\nmofo2 <- mofo |>\n  mutate (scl2 = log(scl))\n  mofo2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 52 × 6\n   study treat   inc   scl   yld  scl2\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1     1     1    76  2194  2265  7.69\n 2     1     2    53  1663  2618  7.42\n 3     1     3    42  1313  2554  7.18\n 4     1     4    37  1177  2632  7.07\n 5     1     5    29   753  2820  6.62\n 6     1     6    42  1343  2799  7.20\n 7     1     7    55  1519  2503  7.33\n 8     1     8    40   516  2967  6.25\n 9     1     9    26   643  2965  6.47\n10     1    10    18   400  3088  5.99\n# ℹ 42 more rows\n```\n:::\n:::\n\n\nAgora, podemos visualizar os dados tranformados em log por meio de um histograma, da mesma forma feita acima.\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-8_0013202122c4db35ded568068c6fefe9'}\n\n```{.r .cell-code}\nmofo2 |>\n    ggplot(aes(scl2))+\n    geom_histogram(bins = 10)\n```\n\n::: {.cell-output-display}\n![](Aula7_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nPara transformar os dados em raiz quadrada, usamos a função mutate e sqrt ().\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-9_c940553c1960ca7d3fdd56970c220b53'}\n\n```{.r .cell-code}\nmofo2 <- mofo |>\n  mutate (scl2 = sqrt(scl))\n  mofo2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 52 × 6\n   study treat   inc   scl   yld  scl2\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1     1     1    76  2194  2265  46.8\n 2     1     2    53  1663  2618  40.8\n 3     1     3    42  1313  2554  36.2\n 4     1     4    37  1177  2632  34.3\n 5     1     5    29   753  2820  27.4\n 6     1     6    42  1343  2799  36.6\n 7     1     7    55  1519  2503  39.0\n 8     1     8    40   516  2967  22.7\n 9     1     9    26   643  2965  25.4\n10     1    10    18   400  3088  20  \n# ℹ 42 more rows\n```\n:::\n\n```{.r .cell-code}\n  mofo2 |>\n    ggplot(aes(scl2))+\n    geom_histogram(bins = 10)\n```\n\n::: {.cell-output-display}\n![](Aula7_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAgora, testaremos os dados da variável produtividade.\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-10_6a7c43a785bde85fa7e90479366885b9'}\n\n```{.r .cell-code}\nmofo2 |>\n    ggplot(aes(yld))+\n    geom_histogram(bins = 10)\n```\n\n::: {.cell-output-display}\n![](Aula7_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Usando a função arrange\n\nFaremos uso agora da função arrange com o conjunto de dados survey. \nA função arrange () é usada para ordenar linhas. Essa função ordena os dados por ordem crescente ou decrescente (depende se coloca o sinal de menos ou não dentro da função).\nO primeiro argumento é a base de dados, os demais argumentos são as colunas pelas quais queremos ordenar as linhas. \nA função slice mostra determinada linha pela posição dela, que você solicita. \nA função filter escolhe casos com base em seus valores.\nA função count conta o número de linhas com cada valor exclusivo de uma variável (com ou sem pesos).\nA função slice seleciona linhas por posição.\n\n\n::: {.cell hash='Aula7_cache/html/unnamed-chunk-11_77eb778d636a00e6c23487af39d4a11c'}\n\n```{.r .cell-code}\nsurvey <- read_excel(\"dados-diversos.xlsx\", \"survey\")\n\n\nsurvey |>\n  filter(state == \"RS\") |>\n  count(species, residue) |>\n  arrange(n) |>\n#slice(1) |>\nrename(res = residue) |>\nmutate(n_class = case_when(\n  n < 30 ~ \"baixa\",\n       TRUE ~ \"Alta\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  species res         n n_class\n  <chr>   <chr>   <int> <chr>  \n1 Fspp    corn       22 baixa  \n2 Fspp    soybean    26 baixa  \n3 Fgra    corn      147 Alta   \n4 Fgra    soybean   255 Alta   \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}