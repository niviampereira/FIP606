---
title: "Aula7"
author: "Nívia"
format: html
---

# Transformação de dados

Como já é de conhecimento, o primeiro passo é carregar os pacotes necessários (tidyverse e readxl).
Para a transformação de dados, será utilizado o conjunto de dados mofo, presente dentro do banco de dados da planilha dados-diversos. 

```{r}
library(tidyverse)
library(readxl)

mofo <- read_excel("dados-diversos.xlsx", "mofo")
```

Agora, vamos visualizar os dados de inc (incidencia) pelos tratamentos e pelo estudo (tratamento dentro de estudo). Então, o tratamento vai dentro do ggplot, enquanto o study vai dentro de facet.
A função facet_wrap() replica o gráfico especificado para cada categoria de uma coluna. 

```{r}
mofo |>
  ggplot(aes(treat, inc))+
  facet_wrap(~study)+
  geom_point()
```

Também pode usar a função geom_col para visualizar os dados de uma forma diferente.

## Histograma

Agora, faremos um histograma para visualizar a incidência e outro para visualizar os dados de escleródio.

```{r}
inc <- mofo |>
  ggplot(aes(inc))+
  geom_histogram()
#Para o scleródio
mofo |>
    ggplot(aes(scl))+
    geom_histogram()
```

Depois disso, montaremos um boxplot para visualizar os dados de scl.

```{r}
scl <- mofo |>
  ggplot(aes(scl))+
  geom_boxplot()
```

Agora, como já aprendido, juntaremos os 2 gráficos, para isso, devemos carregar o pacote patchwork:

```{r}
library(patchwork)
inc + scl
```

Após isso, podemos encontrar a média dos dados. Para achar a média podemos usar as funções $, mean+conjunto ou summary.

```{r}
mofo$scl
mean(mofo$scl)
```

## Transformando os dados

Nós podemos transformar os dados de diferentes maneiras. Ex.: log e raiz quadrada.
Para transformar os dados para o logaritimo dos números usa-se a função mutate e log (). Através da função mutate() realizamos a criação/adição de uma nova variável (ou novas variaveis), que são funções de variáveis existentes, e também criamos/modificamos colunas.

```{r}
mofo2 <- mofo |>
  mutate (scl2 = log(scl))
  mofo2
```

Agora, podemos visualizar os dados tranformados em log por meio de um histograma, da mesma forma feita acima.

```{r}
mofo2 |>
    ggplot(aes(scl2))+
    geom_histogram(bins = 10)

```

Para transformar os dados em raiz quadrada, usamos a função mutate e sqrt ().

```{r}
mofo2 <- mofo |>
  mutate (scl2 = sqrt(scl))
  mofo2
  mofo2 |>
    ggplot(aes(scl2))+
    geom_histogram(bins = 10)
```

Agora, testaremos os dados da variável produtividade.

```{r}
mofo2 |>
    ggplot(aes(yld))+
    geom_histogram(bins = 10)
```

## Usando a função arrange

Faremos uso agora da função arrange com o conjunto de dados survey. 
A função arrange () é usada para ordenar linhas. Essa função ordena os dados por ordem crescente ou decrescente (depende se coloca o sinal de menos ou não dentro da função).
O primeiro argumento é a base de dados, os demais argumentos são as colunas pelas quais queremos ordenar as linhas. 
A função slice mostra determinada linha pela posição dela, que você solicita. 
A função filter escolhe casos com base em seus valores.
A função count conta o número de linhas com cada valor exclusivo de uma variável (com ou sem pesos).
A função slice seleciona linhas por posição.

```{r}
survey <- read_excel("dados-diversos.xlsx", "survey")


survey |>
  filter(state == "RS") |>
  count(species, residue) |>
  arrange(n) |>
#slice(1) |>
rename(res = residue) |>
mutate(n_class = case_when(
  n < 30 ~ "baixa",
       TRUE ~ "Alta"))
```

