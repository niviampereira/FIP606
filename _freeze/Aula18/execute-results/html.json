{
  "hash": "860d4cc971a0bc0352cbb83610d0eab5",
  "result": {
    "markdown": "---\ntitle: \"Transformação de dados Box-Cox\"\nauthor: \"Nívia\"\nformat: html\n---\n\n\n# Transformação de variável tipo boxcox\n\nA transformação de variável tipo Box-Cox é uma técnica utilizada na análise estatística para melhorar a adequação dos dados a pressupostos de normalidade e homogeneidade de variância. Essa transformação é aplicada a variáveis contínuas positivas que possuem assimetria ou heterogeneidade de variância. A transformação de Box-Cox é definida pela seguinte equação: y(lambda) = (x\\^lambda - 1) / lambda\n\nNessa equação, \"x\" representa a variável original, \"y(lambda)\" representa a variável transformada para um determinado valor de lambda e \"lambda\" é o parâmetro de transformação que varia de -∞ a +∞. O valor de lambda determina o tipo de transformação aplicada: Se lambda = 0, a transformação de Box-Cox é equivalente ao logaritmo natural (ln). Se lambda = 1, a transformação de Box-Cox é equivalente à transformação linear (sem transformação). Se lambda \\< 0, é aplicada uma transformação inversa.\n\n**Preparo pré-análise** Para reakizar essse tipo de transformação, usa-se o pacote MASS.\n\n\n::: {.cell hash='Aula18_cache/html/unnamed-chunk-1_b5e683844beed79a2f5de2f43d313e73'}\n\n```{.r .cell-code}\nlibrary(MASS)\n```\n:::\n\n\nDados para exemplificação: InsectSprays, do próprio R. A função boxcox() pode ser utilizada para calcular a transformação de Box-Cox e identificar o valor de lambda ótimo para uma determinada variável. Essa função retorna uma lista de resultados, incluindo o valor de lambda ótimo e gráficos de diagnóstico.\n\n\n::: {.cell hash='Aula18_cache/html/unnamed-chunk-2_eadb94e64fce77a0c592ca97d771811e'}\n\n```{.r .cell-code}\ninsects <- InsectSprays\n\nb <- boxcox(lm(insects$count+0.1 ~1))\n```\n\n::: {.cell-output-display}\n![](Aula18_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nlambda <- b$x[which.max(b$y)]\nlambda\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4242424\n```\n:::\n\n```{.r .cell-code}\ninsects$count2 <-(insects$count ^ lambda - 1) / lambda\nhist(insects$count)\n```\n\n::: {.cell-output-display}\n![](Aula18_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(insects$count2)\n```\n\n::: {.cell-output-display}\n![](Aula18_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n\n```{.r .cell-code}\ninsects$count2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  3.903635  3.024469  6.043993  4.864268  4.864268  4.407118  3.903635\n [8]  6.557185  5.484274  6.043993  4.864268  4.640760  4.161975  5.484274\n[15]  6.219699  4.161975  5.285168  4.864268  5.484274  5.484274  5.863153\n[22]  6.219699  3.024469  4.640760 -2.357143  0.000000  3.024469  0.805831\n[29]  1.399509  0.000000  0.805831  0.000000  1.399509 -2.357143  0.000000\n[36]  1.887150  1.399509  2.308577  4.407118  2.683787  1.887150  1.399509\n[43]  2.308577  2.308577  2.308577  2.308577  0.805831  1.887150  1.399509\n[50]  2.308577  1.399509  2.308577  1.399509  2.683787  0.000000  0.000000\n[57]  1.399509  0.805831  2.683787  1.887150  4.161975  3.629951  5.078760\n[64]  6.390651  5.078760  5.285168  4.640760  3.903635  7.033117  7.033117\n[71]  6.719601  4.640760\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}